// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NormalSkillTable.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MokomoGames.Protobuf {

  /// <summary>Holder for reflection information generated from NormalSkillTable.proto</summary>
  public static partial class NormalSkillTableReflection {

    #region Descriptor
    /// <summary>File descriptor for NormalSkillTable.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NormalSkillTableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZOb3JtYWxTa2lsbFRhYmxlLnByb3RvEgVlY2l0eSJtChZOb3JtYWxTa2ls",
            "bFRhYmxlUmVjb3JkEgoKAm5vGAEgASgNEgwKBG5hbWUYAiABKAkSEwoLZGVz",
            "Y3JpcHRpb24YAyABKAkSEQoJbWF4X2xldmVsGAQgASgNEhEKCWJhc2VfdHVy",
            "bhgFIAEoDSJCChBOb3JtYWxTa2lsbFRhYmxlEi4KB3JlY29yZHMYASADKAsy",
            "HS5lY2l0eS5Ob3JtYWxTa2lsbFRhYmxlUmVjb3JkQheqAhRNb2tvbW9HYW1l",
            "cy5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MokomoGames.Protobuf.NormalSkillTableRecord), global::MokomoGames.Protobuf.NormalSkillTableRecord.Parser, new[]{ "No", "Name", "Description", "MaxLevel", "BaseTurn" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MokomoGames.Protobuf.NormalSkillTable), global::MokomoGames.Protobuf.NormalSkillTable.Parser, new[]{ "Records" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NormalSkillTableRecord : pb::IMessage<NormalSkillTableRecord> {
    private static readonly pb::MessageParser<NormalSkillTableRecord> _parser = new pb::MessageParser<NormalSkillTableRecord>(() => new NormalSkillTableRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NormalSkillTableRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MokomoGames.Protobuf.NormalSkillTableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillTableRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillTableRecord(NormalSkillTableRecord other) : this() {
      no_ = other.no_;
      name_ = other.name_;
      description_ = other.description_;
      maxLevel_ = other.maxLevel_;
      baseTurn_ = other.baseTurn_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillTableRecord Clone() {
      return new NormalSkillTableRecord(this);
    }

    /// <summary>Field number for the "no" field.</summary>
    public const int NoFieldNumber = 1;
    private uint no_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint No {
      get { return no_; }
      set {
        no_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 3;
    private string description_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 4;
    private uint maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "base_turn" field.</summary>
    public const int BaseTurnFieldNumber = 5;
    private uint baseTurn_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BaseTurn {
      get { return baseTurn_; }
      set {
        baseTurn_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NormalSkillTableRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NormalSkillTableRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (No != other.No) return false;
      if (Name != other.Name) return false;
      if (Description != other.Description) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if (BaseTurn != other.BaseTurn) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (No != 0) hash ^= No.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Description.Length != 0) hash ^= Description.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (BaseTurn != 0) hash ^= BaseTurn.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (No != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(No);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Description.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Description);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(MaxLevel);
      }
      if (BaseTurn != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(BaseTurn);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (No != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(No);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Description.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MaxLevel);
      }
      if (BaseTurn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BaseTurn);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NormalSkillTableRecord other) {
      if (other == null) {
        return;
      }
      if (other.No != 0) {
        No = other.No;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Description.Length != 0) {
        Description = other.Description;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      if (other.BaseTurn != 0) {
        BaseTurn = other.BaseTurn;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            No = input.ReadUInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Description = input.ReadString();
            break;
          }
          case 32: {
            MaxLevel = input.ReadUInt32();
            break;
          }
          case 40: {
            BaseTurn = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NormalSkillTable : pb::IMessage<NormalSkillTable> {
    private static readonly pb::MessageParser<NormalSkillTable> _parser = new pb::MessageParser<NormalSkillTable>(() => new NormalSkillTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NormalSkillTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MokomoGames.Protobuf.NormalSkillTableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillTable(NormalSkillTable other) : this() {
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillTable Clone() {
      return new NormalSkillTable(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MokomoGames.Protobuf.NormalSkillTableRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::MokomoGames.Protobuf.NormalSkillTableRecord.Parser);
    private readonly pbc::RepeatedField<global::MokomoGames.Protobuf.NormalSkillTableRecord> records_ = new pbc::RepeatedField<global::MokomoGames.Protobuf.NormalSkillTableRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MokomoGames.Protobuf.NormalSkillTableRecord> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NormalSkillTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NormalSkillTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NormalSkillTable other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
