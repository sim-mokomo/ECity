// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: NormalSkillLevelTable.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MokomoGames.Protobuf {

  /// <summary>Holder for reflection information generated from NormalSkillLevelTable.proto</summary>
  public static partial class NormalSkillLevelTableReflection {

    #region Descriptor
    /// <summary>File descriptor for NormalSkillLevelTable.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static NormalSkillLevelTableReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtOb3JtYWxTa2lsbExldmVsVGFibGUucHJvdG8SBWVjaXR5IkkKG05vcm1h",
            "bFNraWxsTGV2ZWxUYWJsZVJlY29yZBINCgVsZXZlbBgBIAEoDRIbChNuZWVk",
            "X25leHRfbGV2ZWxfZXhwGAIgASgNIkwKFU5vcm1hbFNraWxsTGV2ZWxUYWJs",
            "ZRIzCgdyZWNvcmRzGAEgAygLMiIuZWNpdHkuTm9ybWFsU2tpbGxMZXZlbFRh",
            "YmxlUmVjb3JkQheqAhRNb2tvbW9HYW1lcy5Qcm90b2J1ZmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MokomoGames.Protobuf.NormalSkillLevelTableRecord), global::MokomoGames.Protobuf.NormalSkillLevelTableRecord.Parser, new[]{ "Level", "NeedNextLevelExp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MokomoGames.Protobuf.NormalSkillLevelTable), global::MokomoGames.Protobuf.NormalSkillLevelTable.Parser, new[]{ "Records" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class NormalSkillLevelTableRecord : pb::IMessage<NormalSkillLevelTableRecord> {
    private static readonly pb::MessageParser<NormalSkillLevelTableRecord> _parser = new pb::MessageParser<NormalSkillLevelTableRecord>(() => new NormalSkillLevelTableRecord());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NormalSkillLevelTableRecord> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MokomoGames.Protobuf.NormalSkillLevelTableReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillLevelTableRecord() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillLevelTableRecord(NormalSkillLevelTableRecord other) : this() {
      level_ = other.level_;
      needNextLevelExp_ = other.needNextLevelExp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillLevelTableRecord Clone() {
      return new NormalSkillLevelTableRecord(this);
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 1;
    private uint level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "need_next_level_exp" field.</summary>
    public const int NeedNextLevelExpFieldNumber = 2;
    private uint needNextLevelExp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NeedNextLevelExp {
      get { return needNextLevelExp_; }
      set {
        needNextLevelExp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NormalSkillLevelTableRecord);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NormalSkillLevelTableRecord other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Level != other.Level) return false;
      if (NeedNextLevelExp != other.NeedNextLevelExp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Level != 0) hash ^= Level.GetHashCode();
      if (NeedNextLevelExp != 0) hash ^= NeedNextLevelExp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Level != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Level);
      }
      if (NeedNextLevelExp != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(NeedNextLevelExp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
      }
      if (NeedNextLevelExp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NeedNextLevelExp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NormalSkillLevelTableRecord other) {
      if (other == null) {
        return;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      if (other.NeedNextLevelExp != 0) {
        NeedNextLevelExp = other.NeedNextLevelExp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Level = input.ReadUInt32();
            break;
          }
          case 16: {
            NeedNextLevelExp = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NormalSkillLevelTable : pb::IMessage<NormalSkillLevelTable> {
    private static readonly pb::MessageParser<NormalSkillLevelTable> _parser = new pb::MessageParser<NormalSkillLevelTable>(() => new NormalSkillLevelTable());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NormalSkillLevelTable> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MokomoGames.Protobuf.NormalSkillLevelTableReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillLevelTable() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillLevelTable(NormalSkillLevelTable other) : this() {
      records_ = other.records_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalSkillLevelTable Clone() {
      return new NormalSkillLevelTable(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::MokomoGames.Protobuf.NormalSkillLevelTableRecord> _repeated_records_codec
        = pb::FieldCodec.ForMessage(10, global::MokomoGames.Protobuf.NormalSkillLevelTableRecord.Parser);
    private readonly pbc::RepeatedField<global::MokomoGames.Protobuf.NormalSkillLevelTableRecord> records_ = new pbc::RepeatedField<global::MokomoGames.Protobuf.NormalSkillLevelTableRecord>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MokomoGames.Protobuf.NormalSkillLevelTableRecord> Records {
      get { return records_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NormalSkillLevelTable);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NormalSkillLevelTable other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!records_.Equals(other.records_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= records_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _repeated_records_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_repeated_records_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NormalSkillLevelTable other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _repeated_records_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
